--------------------------------------------------------------------------------
Instructions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
How to Build a GitHub Repository

Introduction
This is for my OIT Systems Academy projects, so it needs to be either publicly-
accessible or I need to be able to share it with Todd Berrett.  

Create Repository
.  In your favorite internet browser, go to https://github.com/
.  If you aren't already logged in, log in using your BYU GitHub account.
.  In the upper right corner is a "+" button with a dropdown menu icon attached 
to it.  Click that button.
.  Click the "New respository" item.  This should take you to a "Create a new
repository" page.  
.  Leave the "Select an organization" dropdown menu unset (because we're not
making this a part of either the "byu-oit" or "byu-oit-sdk" organizations).
.  Leave the "Repository template" item unset.
.  Under "Owner", set "Choose an owner" to your own user.
.  Under "Repository name", put "oit-sys-acad-wi-fi-stoplight".
.  Wait to see if the name is available; if so, go to the next step; if not,
change the name until you find one that is available.
.  In the "Description" field, put "This is the repository for my "Wi-Fi"
stoplight project for OIT Systems Academy."
.  Leave the type of repository set to "Public".
.  Skip the "README" and ".gitignore" portions (you will add those later 
anyway).  For reference, see the following:
	https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes
	https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files
.  Under "Choose a license", pick a license (I chose the GPLv3 one).
.  Click the "Create repository" button (lower right).
.  You should now be taken to the root of your new project in GitHub.  Make note
of the URL:  
	https://github.com/instructions-in-space/oit-sys-acad-wi-fi-stoplight

Clone Your New Repository and Add One or More Files to It
.  Toward the top and right of the page should be a gree "< > Code" button.  
Click that button.  
.  On the "Local" tab, under "Clone", click the "SSH" tab.
.  To the right of the text field is a copy button; click that button.
.  Now, open a terminal and "cd" into your "~/git/" folder.
.  Make a directory called "oit-systems-academy".
.  Type "git clone "
.  Paste the string you copied (above) into the terminal (after "git clone ").
.  Hit Enter.  You should see something like this:
	Cloning into 'oit-sys-acad-wi-fi-stoplight'...
	remote: Enumerating objects: 3, done.
	remote: Counting objects: 100% (3/3), done.
	remote: Compressing objects: 100% (2/2), done.
	remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
	Receiving objects: 100% (3/3), 12.67 KiB | 2.53 MiB/s, done.
(If you get an error, it probably means that you haven't set up SSH keys in
GitHub yet; if so, do that and then try the above steps again.)
.  "cd" into the new repository:
	cd oit-sys-acad-wi-fi-stoplight/
.  Look around:
	ls -lah
You should see a ".git" folder and a "LICENSE" file.
.  At this point, it is appropriate to consider whether or not you need a
".gitignore" file.  If you're not going to be storing any ".env" files (with
credentials, e.g., usernames, passwords, API identifiers and keys), that's good 
because it's very important that you don't commit those to a project.  If you're 
going to be using Python, you will want to make a ".gitignore" file and include 
the following line:
	__pycache__/
(this has Git ignore the "__pycache__" directory).  Likewise, if you are on
a Mac, it's a good idea to include ".DS_Store".  When I was done with my
".gitignore" file, it looked like this:
	__pycache__/
	.DS_Store
.  Now, when you look around again:
	ls -lah
you should see the following:
	.git
	.gitignore
	LICENSE
.  Check the status of the repository:
	git status
.  Add the new file:
	git add .gitignore
.  Go ahead and commit and push your changes:
	git commit -a
	(Write a commit message and save it.)
	git push origin main
(If you get any errors here, it probably means that the user account on your
computer isn't set up completely.)
.  Refresh your repository's GitHub page 
(https://github.com/instructions-in-space/oit-sys-acad-wi-fi-stoplight ) and
you should now see the ".gitignore" file you added.  
.  Add any files you want to be in your repository to the 
"oit-sys-acad-wi-fi-stoplight" folder, but remember that anything you put into
it will be *PUBLIC* as soon as it's committed and pushed to GitHub (so be 
careful what you put there).  

Sources:
	https://stackoverflow.com/questions/3719243/best-practices-for-adding-gitignore-file-for-python-projects
	https://github.com/github/gitignore/blob/main/Python.gitignore
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
How to Put a Raspberry Pi 5 Together

Introduction
Raspberry Pis are "one board" computers, so they are quite a bit simpler to put
together than a traditional desktop computer, but there are a few things that
are usually a good idea (besides just hanging the single board from a string or
putting it on a table at its operating location):
• Add heat sinks to certain components on the board.
• Mount a fan on (or in) the case.
• Mount the board in a case (of some sort).

Minus a set of instructions, you kind of have to use your imagination when
trying to figure out how to do all three things above.  First, though, you 
should read the "Safety Instructions" (on a paper translated into numerous
languages) that are included in the paperboard box the Raspberry Pi came in.
Some of these safety instructions are summarized in a series of modern 
heiroglyphs on a card also included in the Raspberry Pi box:
• Read the instructions.
• Hold the Raspberry Pi by its edges.
• Don't let the Raspberry Pi get too hot.
• Don't touch the board while it's plugged into a power source.
• Keep the board oriented upward
• If you have questions, visit "raspberrypi.com".

Heat Sinks

The first task is to attach the heat sinks which will be held in place with a
pre-applied sticky substance suitable for conducting heat (without melting or
making unpleasantly smelling or dangerous gasses).  There are four heat sinks,
each a different size, so we need to figure out where they go on the Raspberry
Pi (computer board).  One of the heat sinks has a wide channel down the middle,
which seems to match a square component that has a wide raised area, so that 
one's easy.  There are two medium-sized heat sinks, one square, and one
rectangular; these seem to match two chips on the board.  The smallest heat 
sink, however, looks like it could go in a couple of different spots.  

To be safe, I'm going to "duckduckgo" (for privacy's sake) for an image
or instructions on where they should go ("raspberry pi 5 4GB heatsink placement 
passive cooling" is a good search).  I quickly discovered (since there are so
many different models of Raspberry Pi and a number of different cooling setups)
that image search seemed to be the quickest way to find what I was looking for.  
It took several minutes, but I finally found a grainy image that showed where 
all four heat sinks are supposed to go (on this page:  https://www.indiamart.com/proddetail/raspberry-pi-5-copper-heat-sink-passive-cooling-heatsinks-with-self-adhesive-radiator-2854298112612.html ).  It shows the 
smallest heat sink as being on the chip (that size) turned such that it looks
diamond-shaped (and not the one on the opposite side surrounded by several
even smaller chips).  

Before attaching the heat sinks, take a close-up photograph of where they're 
going to go so you will have a record of the writing on the chips in case you 
need it later.  Now, go ahead and carefully peel back the blue cover of the 
adhesive and (also carefully) attach each heat sink to its corresponding 
component.  Tips:
• It helps to be strategic about the order in which you attach them:  I started 
with the smallest one (since it's near some much taller components and would be 
sandwiched in between those and one of the other heat sinks if I didn't do it 
first).  
• Sliding one of your fingernails under the blue cover at one of the corners 
seems to work well for beginning to detach the blue cover of the adhesive (if 
you happen to have tweezers, they would be very helpful in doing this).
• Try to be as exact as you can in placing them (so that they cover the surface 
of the chip as completely as possible).
• Press each heat sink into place snugly.
• If you're not sure about a placement (and need to move your fingers away to
inspect it), set the heat sink down lightly (since you can then pick it back up
again to adjust the position).  

Mount a Fan

The question about the fan is:  Should it be mounted on the inside or outside of
the case?  It's not clear from the look of things (without some investigation)
how it should be done.  To find out, I'm actually going to put it all together
(temporarily) to see how much space there is beneath the top of the case and 
above the board.  After playing around with the parts a bit, it looks like the
screws we've been given to attach the fan would bump up against the top of a
couple of the heat sinks (possibly preventing the case from closing).  This 
means that it's probably not a good idea to mount the fan inside the case (even
though this also means that the fan's cable will have to go through the opening
that exposes the GPIO pins).  

On the other hand, there's no reason I couldn't have the screws come *up* 
through the case (having the nuts on the outside is, arguably, less unsightly 
and problematic [for the reasons already mentioned] than having the entire fan 
on the outside).  Another question is, should I put the screws into the fan in 
such a way that the heads are inset (probably the way it was intended to be).  
Doing it this way means that the screws will extend slightly farther out that 
they would otherwise (and will probably have implications for the direction the 
fan blows, so I may need to reverse it later).  I like this idea because it 
means that the fan's cable will be on the inside where it's less like to be 
damaged (and I think I can live with screws and nuts protruding from the top).

I think I'll orient the fan so that its cable protrudes away from the opening
for accessing the GPIO ports (for the reason already stated); it would be best
if that (delicate) cable isn't anywhere where it can be damaged.  

Mount the Board

Prerequisite:  You will need a screwdriver for this part of the process to
screw in the little screws that hold the top and bottom of the case together
(through the mounting holes in the Raspberry Pi). 

The jack for the fan's power plug is hidden (this is tricky because the fan's 
plug has four pin holes, but the only jacks visible [i.e., uncovered] on the 
board only have two and three pins, respecively).  It's up just behind the bank 
of USB ports nearest the corner of the board and has a cover over it.  Carefully
remove the cover (if you use a tool to do this, be sure not to bend any of the 
pins).  

Place the Raspberry Pi in the bottom part of the case (this takes a little bit
of manual dexterity because you will have to hold the top case while you do it
[because it's now tethered to the Raspberry Pi by the fan's power cable).  
Centering the board on the bottom case can bit a little bit tricky (just be sure 
that the USB and Ethernet ports on the one end line up with the slots made for 
them and that when you're done you can see through the holes in the logic board 
and the holes in the top case).  

On the other end (by the fan), put the end cover on (it is full of ventilation 
holes and has a power button and a cutout for accessing the microSD card slot).  
Be sure that you orient it so that the power button is over the (actual) power 
button on the Raspberry Pi's board.  

Now, place the top case (be sure that the fan's power cord doesn't get pinched
anywhere).  The top case should be oriented so that the slots sticking down 
from the one side (like two front teeth) fit between the USB and Ethernet 
ports.  

Finally, install the four screws by holding the unit upside down and screwing
each one into the holes.

Source:  https://www.raspberrypi.com/documentation/computers/getting-started.html
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
How to Image a MicroSD Card for Use as the Internal Storage of a Raspberry Pi

Introduction
Historically, Raspberry Pis could only boot off of a microSD card in the one
designated slot in the bottom of the board, and while that's not true anymore,
the way of setting up an operating system on one is still the same:  flash an
operating system image onto a microSD card.

Set Up Raspberry Pi Imager
We used to use "Balena Etcher" (https://etcher.balena.io/) to image microSD
cards for Raspberry Pis, but now there is "Raspberry Pi Imager".  Go to 
https://www.raspberrypi.com/software/ and download the version for your 
computer's operating system.  (Note:  if you are on a Mac and happen to use
Homebrew [https://brew.sh/], there is a "cask" for "Raspberry Pi Imager"; run
the following:
	su <administrative_user> (if you use an admin user for this)
	(Enter the password.)
	
[Beginning of quick documentation]

https://brew.sh/
https://docs.brew.sh/Manpage
brew update
brew upgrade
brew search raspberry
brew install raspberry-pi-imager
Look in /Applications/
Launch "Raspberry Pi Imager".
Click "Open"
I chose to have the Raspberry Pi Imager do only the following automatically:
	Set my user's username and password
	Enable SSH and have it use password authentication
	Had it eject automatically (it notifies you when it's time to remove
			the microSD card so that you can unplug it)
Telemetry:
	https://forums.raspberrypi.com/viewtopic.php?t=341514
	(The telemetry is just for Raspberry Pi Imager and doesn't collect
			any personally identifying information.)
The imaging takes some time (15-20 min.?).

Pi Cabling Setup
	Keyboard/mouse combo plugs into one of the four USB-A jacks on the Pi
	(Pi) Micro HDMI to HDMI adapter plugs into HDMI to Mini HDMI cable (monitor)
	Plug white USB-A to USB-C cable between the monitor and the USB power puck
	Use my short USB-A to USB-C cable to power the Pi from my Anker peripherals hub
			(Nothing else works.  If I try to power the Pi from the USB
			power puck, it won't even get past the boot splash screen [i.e.,
			the Pi's graphical desktop never appears].  If I try to use 
			the long USB-A to USB-C cable, it makes it to the desktop and
			I get the usual message complaining about it not having enough
			power, but then another message appears saying the same thing
			[this doesn't happen when using the short cable]).

Pi OS and Software Stuff
Change the keyboard layout from UK to US.
Connect to "eduroam" Wi-Fi:
	Use PEAP
	Check the "No CA certificate required" box
Run updates (you will see a notification on the bar at the top of the screen)

SSH
ssh mark@10.37.186.47

Git Setup
Now that you have remote access on your regular workstation, you can work on
the command line on the Pi remotely.
.  Do the following SSH'ed into the Pi:
	ssh-keygen
.  On your workstation, go to 
https://github.com/instructions-in-space/oit-sys-acad-wi-fi-stoplight
.  Add the new public key you generated on the Pi (in ~/.ssh/id_rsa.pub) to
your GitHub account (click profile [upper right], then "Settings", and then
"SSH and GPG Keys" [left], and add a new SSH key [you should have two there
now, one for your workstation and one for the Pi]).
.  Go back to https://github.com/instructions-in-space/oit-sys-acad-wi-fi-stoplight
.  Click the green "< > Code" button, then the "SSH" tab, and copy the clone
string, e.g.:
	git@github.com:instructions-in-space/oit-sys-acad-wi-fi-stoplight.git
.  In the terminal where you are SSH'ed into the Pi, do this:
	mkdir git
	cd git
	git clone git@github.com:instructions-in-space/oit-sys-acad-wi-fi-stoplight.git
	yes
You should now have a clone of your Git repository here:
	/home/mark/git/oit-sys-acad-wi-fi-stoplight

GPIO Pin on Raspberry Pi 5 Research
I went to Chat GPT (https://chatgpt.com/) and issued this prompt:
	how to control gpio pins on raspberry pi 5
sudo apt update
sudo apt install python3-rpi.gpio
	The following additional packages will be installed:
	  rpi.gpio-common
	The following packages will be REMOVED:
	  python3-rpi-lgpio
I decided to install both RPi.GPIO and GPIOZero, so I did this
too:
	sudo apt install python3-gpiozero

Now, I need a pinout:
	https://pinout.ai/raspberry-pi-5


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
--------------------------------------------------------------------------------

